# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

################################################################################################
# Institute Model
################################################################################################
  type Institute @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [create, update, delete] },
      { allow: owner, ownerField: "representativeId" },
      { allow: public, operations: [read] } ] ) {
    id: ID!
    sport: String!
    title: String!
    location: String
    representative: Member @hasOne
    members: [Member] @hasMany
  }

################################################################################################
# Member Model
################################################################################################
  type Member @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [create, update, delete] },
      { allow: owner, ownerField: "congnitoId" },
      { allow: public, operations: [read, update] } ] ) {
    id: ID!
    congnitoId: String
    name: String!
    email: String!
    contact: String
    institute: Institute @belongsTo
    weight: Float
    approved: String @index (name: "byApproved", sortKeyFields: ["name"], queryField: "listMembersByApproved")
    profileImageUrl: String
  }

################################################################################################
# CodeTable Model
################################################################################################
  type CodeTable @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [read, create, update, delete] },
      { allow: public, operations: [read] } ] ) {
    id: ID!
    name: String!
    details: [CodeDetail] @hasMany
  }

################################################################################################
# CodeDetail Model
################################################################################################
  type CodeDetail @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"] ,operations: [read, create, update, delete] },
      { allow: public, operations: [read] } ] ) {
    id: ID!
    codeTable: CodeTable @belongsTo
    name: String!
    value: String!
    sortOrder: Int!
  }

################################################################################################
# Tournament Model
################################################################################################
  type Tournament @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [read, create, update, delete] },
      { allow: public, operations: [read] } ] ) {
    id: ID!
    title: String!
    location: String
    eventDate: AWSDate
    dueDate: AWSDate
    rings: Int
    Matches: [Match] @hasMany
  }

################################################################################################
# Match Model
################################################################################################
  type Match @model
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [read, create, update, delete] },
      { allow: public, operations: [read] } ] ) {
    id: ID!
    tournament: Tournament @belongsTo
    matchType: CodeDetail @hasOne
    weight: Float!
    tournamentType: CodeDetail @hasOne
    duration: Int
    rounds: Int 
  }

################################################################################################
# Types
################################################################################################
  # type LambdaResultAdmin
  # {
  #   statusCode: Int @auth( rules: [ { allow: groups groups: ["admin"] } ] )
  #   body: String @auth( rules: [ { allow: groups groups: ["admin"] } ] )
  # }

  # type LambdaResultPublic
  # {
  #   statusCode: Int @auth( rules: [ { allow: public } ] )
  #   body: String @auth( rules: [ { allow: public } ] )
  # }

################################################################################################
# Inputs
################################################################################################
  # input BatchApproveMembersInput {
  #   membersIds: [String]
  # }

  # input BatchCreateMatchesInput {
  #   tournamentId: String!
  #   matchType: String!
  #   tournamentType: String!
  #   duration: Int!
  #   rounds: Int!
  #   startWeight: Int!
  #   endWeight: Int!
  #   unit: Int!
  # }

  # input ImportInstituteInput {
  #   id: String!
  #   sport: String!
  #   title: String!
  #   location: String
  # }

  # input ImportMemberInput {
  #   id: String!
  #   name: String!
  #   email: String!
  #   contact: String
  #   sport: String
  #   instituteName: String
  #   instituteLocation: String
  #   approved: String
  # }
################################################################################################
# Custom Queries
################################################################################################
################################################################################################
# Custom Mutations
################################################################################################
  # type Mutation {
  #   importInstitutes(input: [ImportInstituteInput]) : LambdaResultAdmin
  #     @function(name: "importInstitutes-${env}")
  #     @auth( rules: [ { allow: groups, groups: ["admin"] } ] )

  #   importMembers(input: [ImportMemberInput]) : LambdaResultAdmin
  #     @function(name: "importMembers-${env}")
  #     @auth( rules: [ { allow: groups, groups: ["admin"] } ] )

  #   batchApproveMembers(input: BatchApproveMembersInput) : LambdaResultAdmin
  #     @function(name: "batchApproveMembers-${env}")
  #     @auth( rules: [ { allow: groups, groups: ["admin"] } ] )

  #   batchCreateMatches(input: BatchCreateMatchesInput) : LambdaResultAdmin
  #     @function(name: "createMatches-${env}")
  #     @auth( rules: [ { allow: groups, groups: ["admin"] } ] )
  # }

# https://medium.com/@jan.hesters/creating-graphql-batch-operations-for-aws-amplify-with-appsync-and-cognito-ecee6938e8ee

#Difference Between Query and Scan in DynamoDB
# - https://dynobase.dev/dynamodb-scan-vs-query/

#Configure a secondary index
# - https://docs.amplify.aws/javascript/build-a-backend/graphqlapi/data-modeling/#configure-a-secondary-index

#GraphQl transformer v1 to v2 migration
# - https://docs.amplify.aws/javascript/tools/cli/migration/transformer-migration/#changes-that-amplify-cli-requires-you-to-manually-migrate

#Customize your data model
# - https://docs.amplify.aws/react/build-a-backend/graphqlapi/data-modeling/
